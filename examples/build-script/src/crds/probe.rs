// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use typed_builder::TypedBuilder;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}

use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(group = "monitoring.coreos.com", version = "v1", kind = "Probe", plural = "probes")]
#[kube(namespaced)]
#[kube(status = "ProbeStatus")]
pub struct ProbeSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub authorization: Option<ProbeAuthorization>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    #[builder(default, setter(strip_option))]
    pub basic_auth: Option<ProbeBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    #[builder(default, setter(strip_option))]
    pub bearer_token_secret: Option<ProbeBearerTokenSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertClassicHistogramsToNHCB")]
    #[builder(default, setter(strip_option))]
    pub convert_classic_histograms_to_nhcb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallbackScrapeProtocol")]
    #[builder(default, setter(strip_option))]
    pub fallback_scrape_protocol: Option<ProbeFallbackScrapeProtocol>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    #[builder(default, setter(strip_option))]
    pub job_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepDroppedTargets")]
    #[builder(default, setter(strip_option))]
    pub keep_dropped_targets: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelLimit")]
    #[builder(default, setter(strip_option))]
    pub label_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelNameLengthLimit")]
    #[builder(default, setter(strip_option))]
    pub label_name_length_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelValueLengthLimit")]
    #[builder(default, setter(strip_option))]
    pub label_value_length_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricRelabelings")]
    #[builder(default, setter(strip_option))]
    pub metric_relabelings: Option<Vec<ProbeMetricRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub module: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeHistogramBucketLimit")]
    #[builder(default, setter(strip_option))]
    pub native_histogram_bucket_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeHistogramMinBucketFactor")]
    #[builder(default, setter(strip_option))]
    pub native_histogram_min_bucket_factor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub oauth2: Option<ProbeOauth2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub params: Option<Vec<ProbeParams>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prober: Option<ProbeProber>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleLimit")]
    #[builder(default, setter(strip_option))]
    pub sample_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeClass")]
    #[builder(default, setter(strip_option))]
    pub scrape_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeClassicHistograms")]
    #[builder(default, setter(strip_option))]
    pub scrape_classic_histograms: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeProtocols")]
    #[builder(default, setter(strip_option))]
    pub scrape_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeTimeout")]
    #[builder(default, setter(strip_option))]
    pub scrape_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLimit")]
    #[builder(default, setter(strip_option))]
    pub target_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<ProbeTargets>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    #[builder(default, setter(strip_option))]
    pub tls_config: Option<ProbeTlsConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeAuthorization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub credentials: Option<ProbeAuthorizationCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeAuthorizationCredentials {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeBasicAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub password: Option<ProbeBasicAuthPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub username: Option<ProbeBasicAuthUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeBasicAuthPassword {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeBasicAuthUsername {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeBearerTokenSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeFallbackScrapeProtocol {
    PrometheusProto,
    #[serde(rename = "OpenMetricsText0.0.1")]
    OpenMetricsText001,
    #[serde(rename = "OpenMetricsText1.0.0")]
    OpenMetricsText100,
    #[serde(rename = "PrometheusText0.0.4")]
    PrometheusText004,
    #[serde(rename = "PrometheusText1.0.0")]
    PrometheusText100,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeMetricRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<ProbeMetricRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    #[builder(default, setter(strip_option))]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    #[builder(default, setter(strip_option))]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeMetricRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2 {
    #[serde(rename = "clientId")]
    pub client_id: ProbeOauth2ClientId,
    #[serde(rename = "clientSecret")]
    pub client_secret: ProbeOauth2ClientSecret,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    #[builder(default, setter(strip_option))]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    #[builder(default, setter(strip_option))]
    pub no_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyConnectHeader")]
    #[builder(default, setter(strip_option))]
    pub proxy_connect_header: Option<BTreeMap<String, Vec<ProbeOauth2ProxyConnectHeader>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyFromEnvironment")]
    #[builder(default, setter(strip_option))]
    pub proxy_from_environment: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUrl")]
    #[builder(default, setter(strip_option))]
    pub proxy_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    #[builder(default, setter(strip_option))]
    pub tls_config: Option<ProbeOauth2TlsConfig>,
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2ClientId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<ProbeOauth2ClientIdConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<ProbeOauth2ClientIdSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2ClientIdConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2ClientIdSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2ClientSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2ProxyConnectHeader {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ca: Option<ProbeOauth2TlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cert: Option<ProbeOauth2TlsConfigCert>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    #[builder(default, setter(strip_option))]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    #[builder(default, setter(strip_option))]
    pub key_secret: Option<ProbeOauth2TlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    #[builder(default, setter(strip_option))]
    pub max_version: Option<ProbeOauth2TlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    #[builder(default, setter(strip_option))]
    pub min_version: Option<ProbeOauth2TlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    #[builder(default, setter(strip_option))]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<ProbeOauth2TlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<ProbeOauth2TlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<ProbeOauth2TlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<ProbeOauth2TlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeOauth2TlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeOauth2TlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeOauth2TlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeParams {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeProber {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    #[builder(default, setter(strip_option))]
    pub no_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyConnectHeader")]
    #[builder(default, setter(strip_option))]
    pub proxy_connect_header: Option<BTreeMap<String, Vec<ProbeProberProxyConnectHeader>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyFromEnvironment")]
    #[builder(default, setter(strip_option))]
    pub proxy_from_environment: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUrl")]
    #[builder(default, setter(strip_option))]
    pub proxy_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scheme: Option<ProbeProberScheme>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeProberProxyConnectHeader {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeProberScheme {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ingress: Option<ProbeTargetsIngress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticConfig")]
    #[builder(default, setter(strip_option))]
    pub static_config: Option<ProbeTargetsStaticConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsIngress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    #[builder(default, setter(strip_option))]
    pub namespace_selector: Option<ProbeTargetsIngressNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relabelingConfigs")]
    #[builder(default, setter(strip_option))]
    pub relabeling_configs: Option<Vec<ProbeTargetsIngressRelabelingConfigs>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub selector: Option<ProbeTargetsIngressSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsIngressNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub any: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchNames")]
    #[builder(default, setter(strip_option))]
    pub match_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsIngressRelabelingConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<ProbeTargetsIngressRelabelingConfigsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    #[builder(default, setter(strip_option))]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    #[builder(default, setter(strip_option))]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeTargetsIngressRelabelingConfigsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsIngressSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    #[builder(default, setter(strip_option))]
    pub match_expressions: Option<Vec<ProbeTargetsIngressSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsIngressSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsStaticConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relabelingConfigs")]
    #[builder(default, setter(strip_option))]
    pub relabeling_configs: Option<Vec<ProbeTargetsStaticConfigRelabelingConfigs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "static")]
    #[builder(default, setter(strip_option))]
    pub r#static: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTargetsStaticConfigRelabelingConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<ProbeTargetsStaticConfigRelabelingConfigsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    #[builder(default, setter(strip_option))]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    #[builder(default, setter(strip_option))]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeTargetsStaticConfigRelabelingConfigsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ca: Option<ProbeTlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cert: Option<ProbeTlsConfigCert>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    #[builder(default, setter(strip_option))]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    #[builder(default, setter(strip_option))]
    pub key_secret: Option<ProbeTlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    #[builder(default, setter(strip_option))]
    pub max_version: Option<ProbeTlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    #[builder(default, setter(strip_option))]
    pub min_version: Option<ProbeTlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    #[builder(default, setter(strip_option))]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<ProbeTlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<ProbeTlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<ProbeTlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<ProbeTlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeTlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeTlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeTlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bindings: Option<Vec<ProbeStatusBindings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ProbeStatusBindings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    pub group: ProbeStatusBindingsGroup,
    pub name: String,
    pub namespace: String,
    pub resource: ProbeStatusBindingsResource,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeStatusBindingsGroup {
    #[serde(rename = "monitoring.coreos.com")]
    MonitoringCoreosCom,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProbeStatusBindingsResource {
    #[serde(rename = "prometheuses")]
    Prometheuses,
    #[serde(rename = "prometheusagents")]
    Prometheusagents,
    #[serde(rename = "thanosrulers")]
    Thanosrulers,
    #[serde(rename = "alertmanagers")]
    Alertmanagers,
}

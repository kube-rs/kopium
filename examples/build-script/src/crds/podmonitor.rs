// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::apimachinery::pkg::{apis::meta::v1::Condition, util::intstr::IntOrString};
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
    pub use typed_builder::TypedBuilder;
}

use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "monitoring.coreos.com",
    version = "v1",
    kind = "PodMonitor",
    plural = "podmonitors"
)]
#[kube(namespaced)]
#[kube(status = "PodMonitorStatus")]
pub struct PodMonitorSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachMetadata")]
    #[builder(default, setter(strip_option))]
    pub attach_metadata: Option<PodMonitorAttachMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bodySizeLimit")]
    #[builder(default, setter(strip_option))]
    pub body_size_limit: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convertClassicHistogramsToNHCB"
    )]
    #[builder(default, setter(strip_option))]
    pub convert_classic_histograms_to_nhcb: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fallbackScrapeProtocol"
    )]
    #[builder(default, setter(strip_option))]
    pub fallback_scrape_protocol: Option<PodMonitorFallbackScrapeProtocol>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobLabel")]
    #[builder(default, setter(strip_option))]
    pub job_label: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keepDroppedTargets"
    )]
    #[builder(default, setter(strip_option))]
    pub keep_dropped_targets: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelLimit")]
    #[builder(default, setter(strip_option))]
    pub label_limit: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "labelNameLengthLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub label_name_length_limit: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "labelValueLengthLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub label_value_length_limit: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "namespaceSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub namespace_selector: Option<PodMonitorNamespaceSelector>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nativeHistogramBucketLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub native_histogram_bucket_limit: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nativeHistogramMinBucketFactor"
    )]
    #[builder(default, setter(strip_option))]
    pub native_histogram_min_bucket_factor: Option<IntOrString>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podMetricsEndpoints"
    )]
    #[builder(default, setter(strip_option))]
    pub pod_metrics_endpoints: Option<Vec<PodMonitorPodMetricsEndpoints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podTargetLabels")]
    #[builder(default, setter(strip_option))]
    pub pod_target_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleLimit")]
    #[builder(default, setter(strip_option))]
    pub sample_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeClass")]
    #[builder(default, setter(strip_option))]
    pub scrape_class: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scrapeClassicHistograms"
    )]
    #[builder(default, setter(strip_option))]
    pub scrape_classic_histograms: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeProtocols")]
    #[builder(default, setter(strip_option))]
    pub scrape_protocols: Option<Vec<String>>,
    pub selector: PodMonitorSelector,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectorMechanism"
    )]
    #[builder(default, setter(strip_option))]
    pub selector_mechanism: Option<PodMonitorSelectorMechanism>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLimit")]
    #[builder(default, setter(strip_option))]
    pub target_limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorAttachMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub node: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorFallbackScrapeProtocol {
    PrometheusProto,
    #[serde(rename = "OpenMetricsText0.0.1")]
    OpenMetricsText001,
    #[serde(rename = "OpenMetricsText1.0.0")]
    OpenMetricsText100,
    #[serde(rename = "PrometheusText0.0.4")]
    PrometheusText004,
    #[serde(rename = "PrometheusText1.0.0")]
    PrometheusText100,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub any: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchNames")]
    #[builder(default, setter(strip_option))]
    pub match_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub authorization: Option<PodMonitorPodMetricsEndpointsAuthorization>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    #[builder(default, setter(strip_option))]
    pub basic_auth: Option<PodMonitorPodMetricsEndpointsBasicAuth>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bearerTokenSecret"
    )]
    #[builder(default, setter(strip_option))]
    pub bearer_token_secret: Option<PodMonitorPodMetricsEndpointsBearerTokenSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHttp2")]
    #[builder(default, setter(strip_option))]
    pub enable_http2: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterRunning")]
    #[builder(default, setter(strip_option))]
    pub filter_running: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    #[builder(default, setter(strip_option))]
    pub follow_redirects: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "honorLabels")]
    #[builder(default, setter(strip_option))]
    pub honor_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "honorTimestamps")]
    #[builder(default, setter(strip_option))]
    pub honor_timestamps: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub interval: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricRelabelings"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_relabelings: Option<Vec<PodMonitorPodMetricsEndpointsMetricRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    #[builder(default, setter(strip_option))]
    pub no_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub oauth2: Option<PodMonitorPodMetricsEndpointsOauth2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub params: Option<BTreeMap<String, Vec<String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portNumber")]
    #[builder(default, setter(strip_option))]
    pub port_number: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConnectHeader"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_connect_header: Option<BTreeMap<String, Vec<PodMonitorPodMetricsEndpointsProxyConnectHeader>>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyFromEnvironment"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_from_environment: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUrl")]
    #[builder(default, setter(strip_option))]
    pub proxy_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub relabelings: Option<Vec<PodMonitorPodMetricsEndpointsRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scheme: Option<PodMonitorPodMetricsEndpointsScheme>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeTimeout")]
    #[builder(default, setter(strip_option))]
    pub scrape_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    #[builder(default, setter(strip_option))]
    pub target_port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    #[builder(default, setter(strip_option))]
    pub tls_config: Option<PodMonitorPodMetricsEndpointsTlsConfig>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackTimestampsStaleness"
    )]
    #[builder(default, setter(strip_option))]
    pub track_timestamps_staleness: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsAuthorization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub credentials: Option<PodMonitorPodMetricsEndpointsAuthorizationCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsAuthorizationCredentials {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsBasicAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub password: Option<PodMonitorPodMetricsEndpointsBasicAuthPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub username: Option<PodMonitorPodMetricsEndpointsBasicAuthUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsBasicAuthPassword {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsBasicAuthUsername {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsBearerTokenSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsMetricRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<PodMonitorPodMetricsEndpointsMetricRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    #[builder(default, setter(strip_option))]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    #[builder(default, setter(strip_option))]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsMetricRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2 {
    #[serde(rename = "clientId")]
    pub client_id: PodMonitorPodMetricsEndpointsOauth2ClientId,
    #[serde(rename = "clientSecret")]
    pub client_secret: PodMonitorPodMetricsEndpointsOauth2ClientSecret,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    #[builder(default, setter(strip_option))]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    #[builder(default, setter(strip_option))]
    pub no_proxy: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConnectHeader"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_connect_header:
        Option<BTreeMap<String, Vec<PodMonitorPodMetricsEndpointsOauth2ProxyConnectHeader>>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyFromEnvironment"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_from_environment: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUrl")]
    #[builder(default, setter(strip_option))]
    pub proxy_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    #[builder(default, setter(strip_option))]
    pub tls_config: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfig>,
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2ClientId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<PodMonitorPodMetricsEndpointsOauth2ClientIdConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<PodMonitorPodMetricsEndpointsOauth2ClientIdSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2ClientIdConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2ClientIdSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2ClientSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2ProxyConnectHeader {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ca: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cert: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCert>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insecureSkipVerify"
    )]
    #[builder(default, setter(strip_option))]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    #[builder(default, setter(strip_option))]
    pub key_secret: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    #[builder(default, setter(strip_option))]
    pub max_version: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    #[builder(default, setter(strip_option))]
    pub min_version: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    #[builder(default, setter(strip_option))]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<PodMonitorPodMetricsEndpointsOauth2TlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsOauth2TlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsOauth2TlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsOauth2TlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsProxyConnectHeader {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<PodMonitorPodMetricsEndpointsRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    #[builder(default, setter(strip_option))]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    #[builder(default, setter(strip_option))]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsScheme {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ca: Option<PodMonitorPodMetricsEndpointsTlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cert: Option<PodMonitorPodMetricsEndpointsTlsConfigCert>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insecureSkipVerify"
    )]
    #[builder(default, setter(strip_option))]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    #[builder(default, setter(strip_option))]
    pub key_secret: Option<PodMonitorPodMetricsEndpointsTlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    #[builder(default, setter(strip_option))]
    pub max_version: Option<PodMonitorPodMetricsEndpointsTlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    #[builder(default, setter(strip_option))]
    pub min_version: Option<PodMonitorPodMetricsEndpointsTlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    #[builder(default, setter(strip_option))]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<PodMonitorPodMetricsEndpointsTlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<PodMonitorPodMetricsEndpointsTlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    #[builder(default, setter(strip_option))]
    pub config_map: Option<PodMonitorPodMetricsEndpointsTlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub secret: Option<PodMonitorPodMetricsEndpointsTlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorPodMetricsEndpointsTlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsTlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorPodMetricsEndpointsTlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    #[builder(default, setter(strip_option))]
    pub match_expressions: Option<Vec<PodMonitorSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorSelectorMechanism {
    RelabelConfig,
    RoleSelector,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bindings: Option<Vec<PodMonitorStatusBindings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PodMonitorStatusBindings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    pub group: PodMonitorStatusBindingsGroup,
    pub name: String,
    pub namespace: String,
    pub resource: PodMonitorStatusBindingsResource,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorStatusBindingsGroup {
    #[serde(rename = "monitoring.coreos.com")]
    MonitoringCoreosCom,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PodMonitorStatusBindingsResource {
    #[serde(rename = "prometheuses")]
    Prometheuses,
    #[serde(rename = "prometheusagents")]
    Prometheusagents,
    #[serde(rename = "thanosrulers")]
    Thanosrulers,
    #[serde(rename = "alertmanagers")]
    Alertmanagers,
}
